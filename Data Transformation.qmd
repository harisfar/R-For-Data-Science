---
title: "Data Transformation"
author: "Haris Farooqi"
format: 
  html:
    embed-resources: true

editor: visual
---

```{r}
library(nycflights13)
library(tidyverse)
```

```{r}
flights
```

```{r}
glimpse(flights)
```

```{r}
flights |>
  filter(dest == "IAH") |>
  group_by(year, month, day) |>
  summarize(
    arr_delay=mean(arr_delay, na.rm=TRUE)
  )
```

**3.2 Rows**

-   Most important verbs that operate on rows of dataset:

    -   filter() changes which rows are present without changing their order

    -   arrange() changes the order of rows without changing which are present

    -   distinct() finds rows with unique values and can optionally modify columns.

```{r}
#find all flights that departed more than 120 minutes (two hours) late
flights |>
  filter(dep_delay > 120)
```

```{r}
#Flights that departed on January 1
flights |>
  filter(month==1 & day == 1)
```

```{r}
#Flights that departed in January OR February
flights |>
  filter(month == 1 | month == 2)
```

-   %in% combines \| and ==:

    ```{r}
    #using %in% to find Flights that departed in January OR February
    flights |>
      filter(month %in% c(1,2))
    ```

```{r}
#saving filter results
jan1 <- flights |>
  filter(month == 1 & day == 1)
```

-   arrange() takes a data frame and a set of column names to order by.

    ```{r}
    flights |>
      arrange(year,month,day,dep_time)
    ```

-   distinct9) finds all unique rows in a data set - meaning it primarily operates on the rows.

    ```{r}
    #Remove duplicate rows, if any
    flights |>
      distinct()
    ```

```{r}
#Find all unique origin and destination pairs
flights |>
  distinct(origin, dest)
```

```{r}
#Keeping other columns when filtering for unique rows
flights |>
  distinct(origin,dest, .keep_all =TRUE)
```

```{r}
#find number of occurrences using count()
flights |>
  count(origin, dest, sort=TRUE)
```

**3.2.5 Exercises**

1.  In a single pipeline for each condition, find all flights that meet the condition:
    -   Had an arrival delay of two or more hours
    -   Flew to Houston (IAH or HOU)
    -   Were operated by United American, or Delta
    -   Arrived more than two hours late, but didn't leave late
    -   Were delayed by at least an hour, but made up over 30 minutes in flight

```{r}
#had an arrival delay of two or more hours
flights |>
  filter(arr_delay >= 120)

```

```{r}
#flew to houston (IAH or HOU)
flights |>
  filter(dest %in% c('IAH', 'HOU'))
```

```{r}
#were operated by United American, or Delta
flights |>
  filter(carrier %in% c('UA', 'DL'))
```

```{r}
#Arrived more than two hours late, but didn't leave late
flights |>
  filter(arr_delay >= 120 &
           dep_delay <= 0)
```

```{r}
#Were delayed by at least an hour, but made up over 30 minutes in flight 
flights |>
  filter(dep_delay >= 60 &
         dep_delay - arr_delay > 30)
```

2.  Sort flights to find the flights with longest departure delays. Find the flight that left earliest in the morning.

    ```{r}
    #flight with longest departure delays
    flights |> 
      arrange(desc(dep_delay))
    ```

```{r}
#flight that left the earliest
arrange(flights, dep_delay)
```

3.  Sort flights to find the fastest flights.

    ```{r}
    arrange(flights, arr_time-dep_time)
    ```

4.  Was there a flight on every day of 2013?

    ```{r}
    flights |>
      filter(year == 2013) |>
      distinct(month, day) |>
      nrow()
    ```

5.  Which flights traveled the farthest distance? Which traveled the least distance?

```{r}
#farthest distance
arrange(flights, desc(dest))
```

```{r}
#least distance
arrange(flights, dest)
```

6.  Does it matter what order you used filter() and arrange() if you're using both? Why/why not? think about the results and how much work the functions would have to do.

-   The order does matter. If you filter() first, then arrange() will only look at the new filtered data set (which could have less rows than the original data set).

**3.3 Columns**

-   Four important verbs that affect columns without changing rows:

    -   mutate() creates new columns that are derived from the existing columns

    -   select() changes which columns are present

    -   rename() changes the names of the columns

    -   relocate() changes the positions of columns

```{r}
flights |>
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60
  )
```

-   When using mutate(), new columns are added to right hand side by default. We can use the .before argument to add the variables on the left hand side.

```{r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .before = 1
  )
```

-   can use .after to add the new columns after a specified variable:

```{r}
flights |>
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .after = day
  )

```

-   use the .keep = "used" argument to only keep the columns that were involved/created in the mutate() function.

```{r}
flights |>
  mutate(
    gain = dep_delay - arr_delay,
    hours = air_time / 60,
    gain_per_hour = gain / hours,
    .keep = "used"
  )
```

Selecting

```{r}
#select columns by name
flights |>
  select(year,month,day)
```

```{r}
#select all columns between year and day (inclusive):
flights|>
  select(year:day)
```

```{r}
#Select all columns except those from year to day (inclusive):
flights|>
  select(!year:day)
```

```{r}
#select all columns that are characters
flights |>
  select(where(is.character))
```

-   Helper functions that can be used within select():

    -   starts_with("abc"): matches names that begin with "abc".

    -   ends_with("xyz"): matches names that end with "xyz".

    -   contains("ijk"): matches names that contain "ijk".

    -   num_range("x", 1:3): matches x1, x2, x3.

```{r}
#rename variables using select with =
flights |> 
  select(tail_num = tailnum)
```

```{r}
#keep all existing variables and rename a few, use rename() instead of select()
flights |>
  rename(tail_num = tailnum)
```

```{r}
#relocate() to move variables around. 
flights |>
  relocate(time_hour, air_time)
```

```{r}
flights |>
  relocate(year:dep_time, .after=time_hour)
```

```{r}
flights |>
  relocate(starts_with("arr"), .before=dep_time)
```

**3.3.5 Exercises**

1.  Compare dep_time, sched_dep_time, and dep_delay. How would you expect those three numbers to be related?

    ```{r}
    flights |>
      select(dep_time,sched_dep_time, dep_delay)
    ```

-   The larger the difference between your dep_time and sched_dep_time, the larger your dep_delay will be.

2.  Brainstorm as many ways as possible to select dep_time, de_delay, arr_time, and arr_delay from flights.

```{r}
#for time sake, just know this way. you can use the other syntax learned like relocate(), rename() to select those columns as well. 
flights|>
  select(dep_time,dep_delay,arr_time,arr_delay)


```

3.  What happens if you specify the name of the same variable multiple times in a select() call?

    ```{r}
    flights|>
      select(dep_time, dep_time)
    ```

-   It will only output one column.

4.  What does any_of() function do? Why might it be helpful in conjunction with this vector?

    ```{r}
    variables <- c("year", "month", "day", "dep_delay", "arr_delay")
    flights|>
      select(any_of(variables))
    ```

-   Allows you to select variables stored in a vector/object.

5.  Does the result of the running following code surprise you? How does the select helpers deal with upper and lower case by default? How can you change that default?

    ```{r}
    flights |>
      select(contains("TIME"))
    ```

-   Returns every column that has the string "time" in it. Seems to ignore upper case/lower case.

-   To change the default, you can add the ignore.case=FALSE argument. Then this statement will return 0 columns since none of the columns in the flight dataset are upper case.

6.  Rename air_time to air_time_min to indicate units of measurement and move it to the beginning of the dataframe.
